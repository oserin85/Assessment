version: '3.4'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.3.0
    hostname: zookeeper
    environment:
     ZOOKEEPER_CLIENT_PORT: 2181
     ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
     test: nc -z localhost 2181 || exit -1
     start_period: 15s
     interval: 5s
     timeout: 10s
     retries: 3

  kafka:
    hostname: kafka
    image: confluentinc/cp-enterprise-kafka:5.3.0
    ports:
     - '9092:9092'
    environment:
     KAFKA_BROKER_ID: 101
     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
     KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
     KAFKA_DELETE_TOPIC_ENABLE: "true"
     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    entrypoint: [ '/bin/sh', '-c' ]
    command: | 
        "
        ((sleep 15 

            kafka-topics --create --zookeeper zookeeper:2181 --replication-factor 1 --partitions 2 --topic EventTopic --if-not-exists

        )&) 
            /etc/confluent/docker/run "
    healthcheck:
     test: nc -z localhost 9092 || exit -1
     start_period: 30s
     interval: 5s
     timeout: 30s
     retries: 3

  assessment.eventservices.api:
    image: ${DOCKER_REGISTRY-}assessmenteventservicesapi
    build:
      context: .
      dockerfile: MicroServices/EventServices/Assessment.EventServices.Api/Dockerfile

  assessment.eventservices.elastic.api:
    image: ${DOCKER_REGISTRY-}assessmenteventserviceselasticapi
    build:
      context: .
      dockerfile: MicroServices/EventServices/Assessment.EventServices.Elastic.Api/Dockerfile

  assessment.eventservices.postgres.api:
    image: ${DOCKER_REGISTRY-}assessmenteventservicespostgresapi
    build:
      context: .
      dockerfile: MicroServices/EventServices/Assessment.EventServices.Postgres.Api/Dockerfile

  assessment.eventsconsumer:
    image: ${DOCKER_REGISTRY-}assessmenteventsconsumer
    build:
     context: .
     dockerfile: Consumers/Assessment.EventsConsumer/Dockerfile

  assessment.eventsconsumer.postgres:
    image: ${DOCKER_REGISTRY-}assessmenteventsconsumerpostgres
    build:
     context: .
     dockerfile: Consumers/Assessment.EventsConsumer/Dockerfile
    environment:
     - ASPNETCORE_ENVIRONMENT=postgres    






